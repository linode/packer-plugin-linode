// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package linode

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatInterfaceDefaultRoute is an auto-generated flat version of InterfaceDefaultRoute.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatInterfaceDefaultRoute struct {
	IPv4 *bool `mapstructure:"ipv4" required:"false" cty:"ipv4" hcl:"ipv4"`
	IPv6 *bool `mapstructure:"ipv6" required:"false" cty:"ipv6" hcl:"ipv6"`
}

// FlatMapstructure returns a new FlatInterfaceDefaultRoute.
// FlatInterfaceDefaultRoute is an auto-generated flat version of InterfaceDefaultRoute.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*InterfaceDefaultRoute) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatInterfaceDefaultRoute)
}

// HCL2Spec returns the hcl spec of a InterfaceDefaultRoute.
// This spec is used by HCL to read the fields of InterfaceDefaultRoute.
// The decoded values from this spec will then be applied to a FlatInterfaceDefaultRoute.
func (*FlatInterfaceDefaultRoute) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"ipv4": &hcldec.AttrSpec{Name: "ipv4", Type: cty.Bool, Required: false},
		"ipv6": &hcldec.AttrSpec{Name: "ipv6", Type: cty.Bool, Required: false},
	}
	return s
}

// FlatLinodeInterface is an auto-generated flat version of LinodeInterface.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatLinodeInterface struct {
	FirewallID   *int                       `mapstructure:"firewall_id" required:"false" cty:"firewall_id" hcl:"firewall_id"`
	DefaultRoute *FlatInterfaceDefaultRoute `mapstructure:"default_route" required:"false" cty:"default_route" hcl:"default_route"`
	Public       *FlatPublicInterface       `mapstructure:"public" required:"false" cty:"public" hcl:"public"`
	VPC          *FlatVPCInterface          `mapstructure:"vpc" required:"false" cty:"vpc" hcl:"vpc"`
	VLAN         *FlatVLANInterface         `mapstructure:"vlan" required:"false" cty:"vlan" hcl:"vlan"`
}

// FlatMapstructure returns a new FlatLinodeInterface.
// FlatLinodeInterface is an auto-generated flat version of LinodeInterface.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*LinodeInterface) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatLinodeInterface)
}

// HCL2Spec returns the hcl spec of a LinodeInterface.
// This spec is used by HCL to read the fields of LinodeInterface.
// The decoded values from this spec will then be applied to a FlatLinodeInterface.
func (*FlatLinodeInterface) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"firewall_id":   &hcldec.AttrSpec{Name: "firewall_id", Type: cty.Number, Required: false},
		"default_route": &hcldec.BlockSpec{TypeName: "default_route", Nested: hcldec.ObjectSpec((*FlatInterfaceDefaultRoute)(nil).HCL2Spec())},
		"public":        &hcldec.BlockSpec{TypeName: "public", Nested: hcldec.ObjectSpec((*FlatPublicInterface)(nil).HCL2Spec())},
		"vpc":           &hcldec.BlockSpec{TypeName: "vpc", Nested: hcldec.ObjectSpec((*FlatVPCInterface)(nil).HCL2Spec())},
		"vlan":          &hcldec.BlockSpec{TypeName: "vlan", Nested: hcldec.ObjectSpec((*FlatVLANInterface)(nil).HCL2Spec())},
	}
	return s
}

// FlatPublicInterface is an auto-generated flat version of PublicInterface.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatPublicInterface struct {
	IPv4 *FlatPublicInterfaceIPv4 `mapstructure:"ipv4" required:"false" cty:"ipv4" hcl:"ipv4"`
	IPv6 *FlatPublicInterfaceIPv6 `mapstructure:"ipv6" required:"false" cty:"ipv6" hcl:"ipv6"`
}

// FlatMapstructure returns a new FlatPublicInterface.
// FlatPublicInterface is an auto-generated flat version of PublicInterface.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*PublicInterface) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatPublicInterface)
}

// HCL2Spec returns the hcl spec of a PublicInterface.
// This spec is used by HCL to read the fields of PublicInterface.
// The decoded values from this spec will then be applied to a FlatPublicInterface.
func (*FlatPublicInterface) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"ipv4": &hcldec.BlockSpec{TypeName: "ipv4", Nested: hcldec.ObjectSpec((*FlatPublicInterfaceIPv4)(nil).HCL2Spec())},
		"ipv6": &hcldec.BlockSpec{TypeName: "ipv6", Nested: hcldec.ObjectSpec((*FlatPublicInterfaceIPv6)(nil).HCL2Spec())},
	}
	return s
}

// FlatPublicInterfaceIPv4 is an auto-generated flat version of PublicInterfaceIPv4.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatPublicInterfaceIPv4 struct {
	Addresses []FlatPublicInterfaceIPv4Address `mapstructure:"address" required:"false" cty:"address" hcl:"address"`
}

// FlatMapstructure returns a new FlatPublicInterfaceIPv4.
// FlatPublicInterfaceIPv4 is an auto-generated flat version of PublicInterfaceIPv4.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*PublicInterfaceIPv4) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatPublicInterfaceIPv4)
}

// HCL2Spec returns the hcl spec of a PublicInterfaceIPv4.
// This spec is used by HCL to read the fields of PublicInterfaceIPv4.
// The decoded values from this spec will then be applied to a FlatPublicInterfaceIPv4.
func (*FlatPublicInterfaceIPv4) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"address": &hcldec.BlockListSpec{TypeName: "address", Nested: hcldec.ObjectSpec((*FlatPublicInterfaceIPv4Address)(nil).HCL2Spec())},
	}
	return s
}

// FlatPublicInterfaceIPv4Address is an auto-generated flat version of PublicInterfaceIPv4Address.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatPublicInterfaceIPv4Address struct {
	Address *string `mapstructure:"address" required:"true" cty:"address" hcl:"address"`
	Primary *bool   `mapstructure:"primary" required:"false" cty:"primary" hcl:"primary"`
}

// FlatMapstructure returns a new FlatPublicInterfaceIPv4Address.
// FlatPublicInterfaceIPv4Address is an auto-generated flat version of PublicInterfaceIPv4Address.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*PublicInterfaceIPv4Address) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatPublicInterfaceIPv4Address)
}

// HCL2Spec returns the hcl spec of a PublicInterfaceIPv4Address.
// This spec is used by HCL to read the fields of PublicInterfaceIPv4Address.
// The decoded values from this spec will then be applied to a FlatPublicInterfaceIPv4Address.
func (*FlatPublicInterfaceIPv4Address) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"address": &hcldec.AttrSpec{Name: "address", Type: cty.String, Required: false},
		"primary": &hcldec.AttrSpec{Name: "primary", Type: cty.Bool, Required: false},
	}
	return s
}

// FlatPublicInterfaceIPv6 is an auto-generated flat version of PublicInterfaceIPv6.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatPublicInterfaceIPv6 struct {
	Ranges []FlatPublicInterfaceIPv6Range `mapstructure:"ranges" required:"false" cty:"ranges" hcl:"ranges"`
}

// FlatMapstructure returns a new FlatPublicInterfaceIPv6.
// FlatPublicInterfaceIPv6 is an auto-generated flat version of PublicInterfaceIPv6.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*PublicInterfaceIPv6) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatPublicInterfaceIPv6)
}

// HCL2Spec returns the hcl spec of a PublicInterfaceIPv6.
// This spec is used by HCL to read the fields of PublicInterfaceIPv6.
// The decoded values from this spec will then be applied to a FlatPublicInterfaceIPv6.
func (*FlatPublicInterfaceIPv6) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"ranges": &hcldec.BlockListSpec{TypeName: "ranges", Nested: hcldec.ObjectSpec((*FlatPublicInterfaceIPv6Range)(nil).HCL2Spec())},
	}
	return s
}

// FlatPublicInterfaceIPv6Range is an auto-generated flat version of PublicInterfaceIPv6Range.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatPublicInterfaceIPv6Range struct {
	Range *string `mapstructure:"range" required:"true" cty:"range" hcl:"range"`
}

// FlatMapstructure returns a new FlatPublicInterfaceIPv6Range.
// FlatPublicInterfaceIPv6Range is an auto-generated flat version of PublicInterfaceIPv6Range.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*PublicInterfaceIPv6Range) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatPublicInterfaceIPv6Range)
}

// HCL2Spec returns the hcl spec of a PublicInterfaceIPv6Range.
// This spec is used by HCL to read the fields of PublicInterfaceIPv6Range.
// The decoded values from this spec will then be applied to a FlatPublicInterfaceIPv6Range.
func (*FlatPublicInterfaceIPv6Range) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"range": &hcldec.AttrSpec{Name: "range", Type: cty.String, Required: false},
	}
	return s
}

// FlatVLANInterface is an auto-generated flat version of VLANInterface.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatVLANInterface struct {
	VLANLabel   *string `mapstructure:"vlan_label" required:"true" cty:"vlan_label" hcl:"vlan_label"`
	IPAMAddress *string `mapstructure:"ipam_address" required:"false" cty:"ipam_address" hcl:"ipam_address"`
}

// FlatMapstructure returns a new FlatVLANInterface.
// FlatVLANInterface is an auto-generated flat version of VLANInterface.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*VLANInterface) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatVLANInterface)
}

// HCL2Spec returns the hcl spec of a VLANInterface.
// This spec is used by HCL to read the fields of VLANInterface.
// The decoded values from this spec will then be applied to a FlatVLANInterface.
func (*FlatVLANInterface) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"vlan_label":   &hcldec.AttrSpec{Name: "vlan_label", Type: cty.String, Required: false},
		"ipam_address": &hcldec.AttrSpec{Name: "ipam_address", Type: cty.String, Required: false},
	}
	return s
}

// FlatVPCInterface is an auto-generated flat version of VPCInterface.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatVPCInterface struct {
	SubnetID *int                  `mapstructure:"subnet_id" required:"true" cty:"subnet_id" hcl:"subnet_id"`
	IPv4     *FlatVPCInterfaceIPv4 `mapstructure:"ipv4" required:"false" cty:"ipv4" hcl:"ipv4"`
}

// FlatMapstructure returns a new FlatVPCInterface.
// FlatVPCInterface is an auto-generated flat version of VPCInterface.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*VPCInterface) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatVPCInterface)
}

// HCL2Spec returns the hcl spec of a VPCInterface.
// This spec is used by HCL to read the fields of VPCInterface.
// The decoded values from this spec will then be applied to a FlatVPCInterface.
func (*FlatVPCInterface) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"subnet_id": &hcldec.AttrSpec{Name: "subnet_id", Type: cty.Number, Required: false},
		"ipv4":      &hcldec.BlockSpec{TypeName: "ipv4", Nested: hcldec.ObjectSpec((*FlatVPCInterfaceIPv4)(nil).HCL2Spec())},
	}
	return s
}

// FlatVPCInterfaceIPv4 is an auto-generated flat version of VPCInterfaceIPv4.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatVPCInterfaceIPv4 struct {
	Addresses []FlatVPCInterfaceIPv4Address `mapstructure:"addresses" required:"false" cty:"addresses" hcl:"addresses"`
	Ranges    []FlatVPCInterfaceIPv4Range   `mapstructure:"ranges" required:"false" cty:"ranges" hcl:"ranges"`
}

// FlatMapstructure returns a new FlatVPCInterfaceIPv4.
// FlatVPCInterfaceIPv4 is an auto-generated flat version of VPCInterfaceIPv4.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*VPCInterfaceIPv4) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatVPCInterfaceIPv4)
}

// HCL2Spec returns the hcl spec of a VPCInterfaceIPv4.
// This spec is used by HCL to read the fields of VPCInterfaceIPv4.
// The decoded values from this spec will then be applied to a FlatVPCInterfaceIPv4.
func (*FlatVPCInterfaceIPv4) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"addresses": &hcldec.BlockListSpec{TypeName: "addresses", Nested: hcldec.ObjectSpec((*FlatVPCInterfaceIPv4Address)(nil).HCL2Spec())},
		"ranges":    &hcldec.BlockListSpec{TypeName: "ranges", Nested: hcldec.ObjectSpec((*FlatVPCInterfaceIPv4Range)(nil).HCL2Spec())},
	}
	return s
}

// FlatVPCInterfaceIPv4Address is an auto-generated flat version of VPCInterfaceIPv4Address.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatVPCInterfaceIPv4Address struct {
	Address        *string `mapstructure:"address" required:"true" cty:"address" hcl:"address"`
	Primary        *bool   `mapstructure:"primary" required:"false" cty:"primary" hcl:"primary"`
	NAT1To1Address *string `mapstructure:"nat_1_1_address" required:"false" cty:"nat_1_1_address" hcl:"nat_1_1_address"`
}

// FlatMapstructure returns a new FlatVPCInterfaceIPv4Address.
// FlatVPCInterfaceIPv4Address is an auto-generated flat version of VPCInterfaceIPv4Address.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*VPCInterfaceIPv4Address) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatVPCInterfaceIPv4Address)
}

// HCL2Spec returns the hcl spec of a VPCInterfaceIPv4Address.
// This spec is used by HCL to read the fields of VPCInterfaceIPv4Address.
// The decoded values from this spec will then be applied to a FlatVPCInterfaceIPv4Address.
func (*FlatVPCInterfaceIPv4Address) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"address":         &hcldec.AttrSpec{Name: "address", Type: cty.String, Required: false},
		"primary":         &hcldec.AttrSpec{Name: "primary", Type: cty.Bool, Required: false},
		"nat_1_1_address": &hcldec.AttrSpec{Name: "nat_1_1_address", Type: cty.String, Required: false},
	}
	return s
}

// FlatVPCInterfaceIPv4Range is an auto-generated flat version of VPCInterfaceIPv4Range.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatVPCInterfaceIPv4Range struct {
	Range *string `mapstructure:"range" required:"true" cty:"range" hcl:"range"`
}

// FlatMapstructure returns a new FlatVPCInterfaceIPv4Range.
// FlatVPCInterfaceIPv4Range is an auto-generated flat version of VPCInterfaceIPv4Range.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*VPCInterfaceIPv4Range) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatVPCInterfaceIPv4Range)
}

// HCL2Spec returns the hcl spec of a VPCInterfaceIPv4Range.
// This spec is used by HCL to read the fields of VPCInterfaceIPv4Range.
// The decoded values from this spec will then be applied to a FlatVPCInterfaceIPv4Range.
func (*FlatVPCInterfaceIPv4Range) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"range": &hcldec.AttrSpec{Name: "range", Type: cty.String, Required: false},
	}
	return s
}
